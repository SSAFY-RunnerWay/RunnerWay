plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def dotenv = new Properties()
def envFile = file("${rootProject.projectDir}/../.env")
if (envFile.exists()) {
    envFile.withInputStream { stream -> dotenv.load(stream) }
} else {
    throw new FileNotFoundException("Could not find .env file at: ${envFile.path}")
}

// Signing information from key.properties
def keystoreProperties = new Properties()
def keystoreFile = file("./key.properties")
if (keystoreFile.exists()) {
    keystoreFile.withInputStream { stream -> keystoreProperties.load(stream) }
} else {
    throw new FileNotFoundException("Could not find key.properties file at: ${keystoreFile.path}")
}

android {
    namespace = "com.runnerway.frontend"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.runnerway.frontend"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdkVersion = 20
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName

        def GoogleMapAPIKey = dotenv['GOOGLE_MAPS_API_KEY']
        if (GoogleMapAPIKey == null) {
            throw new GradleException("GOOGLE_MAPS_API_KEY not found in .env file")
        }
        manifestPlaceholders = [GOOGLE_MAPS_API_KEY: GoogleMapAPIKey]
    }

    signingConfigs {
        release {
            // Load signing properties from key.properties
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false // Set to true for release builds if obfuscation and shrinking is required
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        buildConfig = true
    }

    lintOptions {
        disable 'Deprecation'
    }
}

flutter {
    source = "../.."
}
